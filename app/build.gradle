/*
 * Copyright © 2017-2020 WireGuard LLC.
 * Copyright © 2018-2020 Harsh Shandilya <msfjarvis@gmail.com>. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */
plugins {
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'scabbard.gradle' version '0.1.0'
}

final def keystorePropertiesFile = rootProject.file 'keystore.properties'

final def gitHash = { ->
    final def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    stdout.toString().trim()
}

static boolean isNotCi() {
    return System.env['GITHUB_WORKFLOW'] == null && System.env['DRONE'] == null
}

scabbard {
    enabled isNotCi()
}

android {
    dataBinding.enabled = true
    if (isNotCi()) {
        applicationVariants.all { final variant ->
            variant.outputs.all {
                outputFileName = "viscerion_${gitHash()}.apk"
            }
        }
    }
    defaultConfig {
        applicationId versions.packageName
        resConfigs 'de', 'en', 'fr', 'pt-rBR', 'ru', 'zh'
        testApplicationId "${versions.packageName}.test"
        testFunctionalTest true
        testHandleProfiling true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    packagingOptions {
        exclude '**/*.kotlin_metadata'
    }
    if (keystorePropertiesFile.exists()) {
        final def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        signingConfigs {
            release {
                keyAlias = keystoreProperties['keyAlias']
                keyPassword = keystoreProperties['keyPassword']
                storeFile = rootProject.file keystoreProperties['storeFile']
                storePassword = keystoreProperties['storePassword']
            }
        }
        buildTypes.release.signingConfig = signingConfigs.release
        buildTypes.debug.signingConfig = signingConfigs.release
    }
    buildTypes {
        release {
            minifyEnabled = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'GIT_HASH', '\"\"'
        }
        debug {
            applicationIdSuffix = '.debug'
            versionNameSuffix = '-debug'
            minifyEnabled = false
            buildConfigField 'String', 'GIT_HASH', isNotCi() ? '\"\"' : "\"${gitHash()}\""
        }
    }
    lintOptions {
        abortOnError = true
        disable(
            'UnusedResources', // Databinding-only layouts are misinterpreted by Android lint as unused
            'MissingTranslation', // I personally resolve these issues before releases
            'ImpliedQuantity' // Some languages differ between 0 and 1 quantities but I don't use %d in the confirm_tunnel_deletion plural so lint trips
        )
    }
}

dependencies {
    implementation project(':config')
    implementation project(':native')
    implementation project(':util')

    implementation deps.androidx.annotation
    implementation deps.androidx.appcompat
    implementation deps.androidx.biometric
    implementation deps.androidx.constraint_layout
    implementation deps.androidx.core_ktx
    implementation deps.androidx.fragment_ktx
    implementation deps.androidx.material
    implementation deps.androidx.preference
    constraints {
        implementation(deps.androidx.recycler_view) {
            because 'versions above 1.0.0 have an accessibility related bug that causes crashes'
        }
    }
    implementation deps.androidx.slice_builders
    implementation deps.androidx.slice_builders_ktx
    implementation deps.androidx.slice_core
    implementation deps.androidx.work_ktx

    implementation deps.third_party.barcode
    implementation deps.third_party.dagger
    implementation deps.third_party.mobius.android
    implementation deps.third_party.mobius.core
    implementation deps.third_party.retrofuture
    implementation deps.third_party.timber
    implementation deps.third_party.whatthestack

    kapt deps.third_party.dagger_compiler

    testImplementation deps.testing.junit
    testImplementation deps.third_party.mobius.test
    testImplementation project(path: ':test-resources', configuration: 'testRes')
}
